import streamlit as st
from PIL import Image
import requests
from io import BytesIO
import torch
import torchvision.transforms as transforms
import time

st.set_page_config(page_title="SWIN –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", layout="wide")
# –ù–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
class_names = ["buildings", "forest", "glacier", "mountain", "sea", "street"]


@st.cache_resource
def load_model():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—é –º–æ–¥–µ–ª—å —Ü–µ–ª–∏–∫–æ–º (torch.save(model))
    model = torch.load("models/landscape.pt", map_location="cpu", weights_only=False)
    model.eval()
    return model


model = load_model()

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
transform = transforms.Compose([transforms.Resize((224, 224)), transforms.ToTensor()])


st.title("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–µ–π–∑–∞–∂–µ–π —Å –ø–æ–º–æ—â—å—é üê∑")

source = st.radio("–ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", ["–§–∞–π–ª", "–°—Å—ã–ª–∫–∞"])
images = []

if source == "–§–∞–π–ª":
    uploaded = st.sidebar.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", type=["jpg", "jpeg", "png"], accept_multiple_files=True
    )
    if uploaded:
        for f in uploaded:
            img = Image.open(f).convert("RGB")
            images.append(img)

elif source == "–°—Å—ã–ª–∫–∞":
    url = st.text_input("–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    if url:
        try:
            response = requests.get(url)
            img = Image.open(BytesIO(response.content)).convert("RGB")
            images.append(img)
        except:
            st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

if images:
    for img in images:
        st.image(img, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", width=300)
        input_tensor = transform(img).unsqueeze(0)

        start = time.time()
        with torch.no_grad():
            output = model(input_tensor)
        elapsed = time.time() - start

        _, pred = torch.max(output, 1)
        st.success(f"–ö–ª–∞—Å—Å: {class_names[pred.item()]}")
        st.info(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {elapsed:.3f} —Å–µ–∫")
